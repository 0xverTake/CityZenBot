#!/usr/bin/env node

// Script de diagnostic de la base de donn√©es
// Usage: node diagnose-db.js

const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');
const Logger = require('./src/utils/Logger');

async function diagnoseDatabase() {
    console.log('üîç Diagnostic de la base de donn√©es CityZenBot\n');
    
    const dbPath = process.env.DB_PATH || path.join(__dirname, 'database/starcitizenbot.db');
    const dbDir = path.dirname(dbPath);
    
    try {
        // 1. V√©rifier l'existence du r√©pertoire
        console.log('üìÅ V√©rification du r√©pertoire...');
        if (!fs.existsSync(dbDir)) {
            console.log(`‚ùå R√©pertoire manquant: ${dbDir}`);
            console.log('üí° Cr√©ation du r√©pertoire...');
            fs.mkdirSync(dbDir, { recursive: true });
            console.log('‚úÖ R√©pertoire cr√©√©');
        } else {
            console.log(`‚úÖ R√©pertoire existe: ${dbDir}`);
        }
        
        // 2. V√©rifier l'existence du fichier DB
        console.log('\nüíæ V√©rification du fichier de base de donn√©es...');
        if (!fs.existsSync(dbPath)) {
            console.log(`‚ùå Base de donn√©es manquante: ${dbPath}`);
            console.log('üí° La base sera cr√©√©e automatiquement au premier d√©marrage');
        } else {
            console.log(`‚úÖ Base de donn√©es existe: ${dbPath}`);
            
            // V√©rifier la taille
            const stats = fs.statSync(dbPath);
            console.log(`üìä Taille: ${Math.round(stats.size / 1024)} KB`);
            console.log(`üìÖ Modifi√©e: ${stats.mtime.toLocaleString()}`);
        }
        
        // 3. Test de connexion
        console.log('\nüîå Test de connexion...');
        const db = new sqlite3.Database(dbPath);
        
        await new Promise((resolve, reject) => {
            db.get("SELECT name FROM sqlite_master WHERE type='table'", (err, row) => {
                if (err) {
                    reject(err);
                } else {
                    console.log('‚úÖ Connexion SQLite r√©ussie');
                    resolve();
                }
            });
        });
        
        // 4. Lister les tables
        console.log('\nüìã Tables disponibles:');
        const tables = await new Promise((resolve, reject) => {
            db.all("SELECT name FROM sqlite_master WHERE type='table'", (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });
        
        if (tables.length === 0) {
            console.log('‚ùå Aucune table trouv√©e - Base de donn√©es non initialis√©e');
        } else {
            for (const table of tables) {
                console.log(`‚úÖ Table: ${table.name}`);
                
                // Compter les enregistrements
                const count = await new Promise((resolve, reject) => {
                    db.get(`SELECT COUNT(*) as count FROM ${table.name}`, (err, row) => {
                        if (err) reject(err);
                        else resolve(row.count);
                    });
                });
                console.log(`   üìä ${count} enregistrements`);
            }
        }
        
        // 5. Test d'√©criture
        console.log('\n‚úèÔ∏è Test d\'√©criture...');
        await new Promise((resolve, reject) => {
            db.run("CREATE TABLE IF NOT EXISTS test_table (id INTEGER PRIMARY KEY, test_data TEXT)", (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        
        await new Promise((resolve, reject) => {
            db.run("INSERT INTO test_table (test_data) VALUES (?)", ['test_diagnostic'], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        
        await new Promise((resolve, reject) => {
            db.run("DELETE FROM test_table WHERE test_data = ?", ['test_diagnostic'], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        
        console.log('‚úÖ Test d\'√©criture r√©ussi');
        
        // 6. Fermeture
        await new Promise((resolve) => {
            db.close((err) => {
                if (err) {
                    console.log('‚ö†Ô∏è Erreur lors de la fermeture:', err.message);
                } else {
                    console.log('‚úÖ Base de donn√©es ferm√©e proprement');
                }
                resolve();
            });
        });
        
        console.log('\nüéâ Diagnostic termin√© - Base de donn√©es OK !');
        
    } catch (error) {
        console.error('\n‚ùå Erreur lors du diagnostic:', error.message);
        console.log('\nüí° Solutions possibles:');
        console.log('1. V√©rifiez les permissions du r√©pertoire');
        console.log('2. R√©installez sqlite3: npm install sqlite3');
        console.log('3. Supprimez et recr√©ez la base: rm database/*.db');
        console.log('4. V√©rifiez l\'espace disque disponible');
        process.exit(1);
    }
}

// Lancer le diagnostic
diagnoseDatabase();
