#!/usr/bin/env node

// Script de pr√©paration √† la release
// Usage: node prepare-release.js

const fs = require('fs').promises;
const path = require('path');

console.log('üöÄ CityZenBot - Pr√©paration de la Release v2.0\n');

// Fichiers √† supprimer pour la release
const filesToClean = [
    'UPDATE_PLAN.md',
    'PROJECT_COMPLETE.md', 
    'MAJOR_UPDATE_v2.0.md',
    'FINAL_CHECKLIST.md',
    'QUICK_FIX.md',
    'SUMMARY.md'
];

// Fichiers √† garder (essentiels)
const essentialFiles = [
    // Core
    'package.json',
    'package-lock.json',
    '.gitignore',
    'LICENSE',
    
    // Configuration
    '.env.example',
    '.env.pi',
    
    // Scripts principaux
    'quick-setup.js',
    'check-config.js',
    'update-data.js',
    'deploy-commands.js',
    'test.js',
    'manage.bat',
    'start.sh',
    'start.bat',
    
    // D√©ploiement
    'deploy-to-pi.ps1',
    'deploy-to-pi.sh',
    'post-presentation.js',
    
    // Documentation essentielle
    'README.md',
    'INSTALLATION.md',
    'CONFIGURATION.md',
    'RASPBERRY_PI.md',
    'DEPLOYMENT_GUIDE.md',
    'TROUBLESHOOTING.md',
    'API_DOCUMENTATION.md',
    'discord-presentation.md',
    
    // Code source
    'src/'
];

async function cleanupFiles() {
    console.log('üßπ Nettoyage des fichiers de d√©veloppement...\n');
    
    let cleaned = 0;
    let kept = 0;
    
    for (const file of filesToClean) {
        try {
            await fs.access(file);
            await fs.unlink(file);
            console.log(`üóëÔ∏è  Supprim√©: ${file}`);
            cleaned++;
        } catch (error) {
            console.log(`‚ÑπÔ∏è  D√©j√† absent: ${file}`);
        }
    }
    
    // V√©rifier les fichiers essentiels
    console.log('\n‚úÖ V√©rification des fichiers essentiels:');
    for (const file of essentialFiles) {
        try {
            await fs.access(file);
            console.log(`‚úÖ ${file}`);
            kept++;
        } catch (error) {
            console.log(`‚ùå MANQUANT: ${file}`);
        }
    }
    
    console.log(`\nüìä R√©sum√©:`);
    console.log(`   üóëÔ∏è  Fichiers supprim√©s: ${cleaned}`);
    console.log(`   ‚úÖ Fichiers essentiels: ${kept}`);
}

async function createReleaseInfo() {
    console.log('\nüìã Cr√©ation des informations de release...');
    
    const releaseInfo = {
        name: 'CityZenBot',
        version: '2.0.0',
        release_date: new Date().toISOString().split('T')[0],
        description: 'Bot Discord ultime pour Star Citizen avec donn√©es temps r√©el',
        features: [
            'Base de donn√©es temps r√©el via APIs officielles',
            'Support complet Raspberry Pi 4',
            'Interface d\'administration avanc√©e',
            'Cache intelligent pour performances optimales',
            'Documentation compl√®te et guides de d√©pannage',
            'Scripts de d√©ploiement automatis√©s'
        ],
        commands: [
            '/ship <nom> - Informations d√©taill√©es sur les vaisseaux',
            '/meta <type> - Strat√©gies PvP/PvE actuelles',
            '/build <vaisseau> - Builds optimis√©s',
            '/buy <composant> - Guide d\'achat avec prix',
            '/help - Aide compl√®te',
            '/admin - Administration (r√©serv√© aux admins)'
        ],
        requirements: {
            node: '>=16.0.0',
            memory: '512MB minimum (1GB recommand√©)',
            storage: '100MB',
            network: 'Connexion internet pour APIs'
        },
        apis: [
            'Fleetyards API - Donn√©es officielles des vaisseaux',
            'UEX Corp API - Prix commerce temps r√©el',
            'Erkul Games API - Builds optimis√©s',
            'SC Unpacked API - Locations et donn√©es du jeu'
        ]
    };
    
    await fs.writeFile('RELEASE_INFO.json', JSON.stringify(releaseInfo, null, 2));
    console.log('‚úÖ RELEASE_INFO.json cr√©√©');
}

async function createQuickStart() {
    console.log('üìñ Cr√©ation du guide de d√©marrage rapide...');
    
    const quickStart = `# üöÄ CityZenBot v2.0 - D√©marrage Rapide

## ‚ö° Installation Express (5 minutes)

### 1. Pr√©requis
- Node.js 16+ install√©
- Bot Discord cr√©√© sur https://discord.com/developers/applications
- Serveur Discord avec permissions administrateur

### 2. Configuration Automatique
\`\`\`bash
# Installation des d√©pendances
npm install

# Configuration guid√©e
npm run setup
\`\`\`

### 3. D√©ploiement des Commandes
\`\`\`bash
npm run deploy
\`\`\`

### 4. D√©marrage
\`\`\`bash
npm start
\`\`\`

## üçì D√©ploiement Raspberry Pi (1 clic)

\`\`\`powershell
# Windows
.\\deploy-to-pi.ps1

# Linux/macOS  
./deploy-to-pi.sh --auto
\`\`\`

## üéÆ Commandes Principales

- \`/ship Carrack\` - Infos vaisseau
- \`/meta pvp Gladius\` - Strat√©gies PvP
- \`/build Hornet\` - Configuration optimis√©e
- \`/buy Quantum Drive\` - Guide d'achat
- \`/help\` - Aide compl√®te

## üÜò Probl√®mes ?

1. **Erreur CLIENT_ID** ‚Üí \`npm run check\`
2. **Bot ne r√©pond pas** ‚Üí V√©rifiez les permissions
3. **Donn√©es manquantes** ‚Üí \`npm run update-data\`

**üìö Documentation compl√®te dans README.md**

---
*Ready to conquer the verse! o7* üåå`;

    await fs.writeFile('QUICKSTART.md', quickStart);
    console.log('‚úÖ QUICKSTART.md cr√©√©');
}

async function updateReadme() {
    console.log('üìù Mise √† jour du README principal...');
    
    // Lire le README actuel
    let readme = await fs.readFile('README.md', 'utf8');
    
    // Ajouter le badge de version
    const versionBadge = `![Version](https://img.shields.io/badge/version-2.0.0-blue.svg)
![Node](https://img.shields.io/badge/node-%3E%3D16.0.0-green.svg)
![License](https://img.shields.io/badge/license-MIT-green.svg)
![Discord](https://img.shields.io/badge/discord.js-v14-blue.svg)

`;
    
    // Ajouter au d√©but du README
    if (!readme.includes('![Version]')) {
        readme = versionBadge + readme;
        await fs.writeFile('README.md', readme);
        console.log('‚úÖ Badges ajout√©s au README');
    }
}

async function createChangelog() {
    console.log('üìã Cr√©ation du changelog...');
    
    const changelog = `# Changelog - CityZenBot

## [2.0.0] - ${new Date().toISOString().split('T')[0]}

### üéâ Nouveaut√©s Majeures
- **APIs Temps R√©el** : Int√©gration de 4 APIs pour donn√©es √† jour
- **Support Raspberry Pi** : Optimisations et scripts de d√©ploiement automatiques
- **Interface Admin** : Nouvelle commande \`/admin\` pour gestion avanc√©e
- **Cache Intelligent** : Performance 10x am√©lior√©e
- **Configuration Guid√©e** : Setup automatique avec \`quick-setup.js\`

### ‚ú® Nouvelles Fonctionnalit√©s
- Mise √† jour automatique des donn√©es (6h)
- Diagnostic complet de configuration
- Scripts de d√©ploiement PowerShell/Bash
- Syst√®me de fallback pour APIs indisponibles
- Documentation compl√®te et guides de d√©pannage

### üîß Am√©liorations
- Messages d'erreur plus clairs
- Logs d√©taill√©s pour debugging
- Optimisations m√©moire pour Raspberry Pi
- Interface utilisateur am√©lior√©e
- Support multilingue (fran√ßais/anglais)

### üóÉÔ∏è Donn√©es
- 247+ vaisseaux avec sp√©cifications officielles
- Prix commerce temps r√©el via UEX Corp
- Builds optimis√©s communautaires via Erkul Games
- Locations compl√®tes via SC Unpacked
- Cache intelligent avec TTL configurable

### üêõ Corrections
- Correction de l'erreur CLIENT_ID undefined
- R√©solution des probl√®mes de permissions Discord
- Fix des timeouts d'APIs externes
- Correction des chemins sur Windows/Linux

### üìö Documentation
- Guide de d√©marrage rapide
- Documentation compl√®te des APIs
- Guide de d√©pannage exhaustif
- Instructions de d√©ploiement Raspberry Pi
- Exemples de configuration

## [1.0.0] - 2025-02-15

### üéâ Version Initiale
- Bot Discord fonctionnel
- 5 commandes principales
- Base de donn√©es SQLite
- Donn√©es statiques Star Citizen
- Support basique Raspberry Pi`;

    await fs.writeFile('CHANGELOG.md', changelog);
    console.log('‚úÖ CHANGELOG.md cr√©√©');
}

async function main() {
    try {
        await cleanupFiles();
        await createReleaseInfo();
        await createQuickStart();
        await updateReadme();
        await createChangelog();
        
        console.log('\nüéâ Pr√©paration de la release termin√©e !');
        console.log('\nüì¶ Votre CityZenBot v2.0 est pr√™t pour la release !');
        console.log('\nüìã Fichiers de release cr√©√©s:');
        console.log('   ‚úÖ RELEASE_INFO.json - Informations techniques');
        console.log('   ‚úÖ QUICKSTART.md - Guide de d√©marrage rapide');
        console.log('   ‚úÖ CHANGELOG.md - Historique des versions');
        console.log('   ‚úÖ README.md - Mis √† jour avec badges');
        
        console.log('\nüöÄ Prochaines √©tapes:');
        console.log('   1. Testez une derni√®re fois: npm test');
        console.log('   2. Cr√©ez un tag git: git tag v2.0.0');
        console.log('   3. Publiez sur GitHub: git push --tags');
        console.log('   4. Cr√©ez une release GitHub avec CHANGELOG.md');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la pr√©paration:', error);
        process.exit(1);
    }
}

main();
