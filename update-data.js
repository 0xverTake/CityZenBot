#!/usr/bin/env node

// Script de mise √† jour manuelle des donn√©es Star Citizen
// Usage: node update-data.js [--force]

const DataUpdateService = require('./src/services/DataUpdateService');
const Logger = require('./src/utils/Logger');

async function main() {
    console.log('üöÄ CityZenBot - Mise √† jour des donn√©es Star Citizen\n');
    
    const force = process.argv.includes('--force');
    const updateService = new DataUpdateService();
    
    try {
        if (force) {
            console.log('‚ö° Mode force activ√© - Mise √† jour imm√©diate');
        }
        
        console.log('üì° Connexion aux APIs Star Citizen...');
        
        // Test de connectivit√©
        const axios = require('axios');
        const tests = [
            { name: 'Fleetyards', url: 'https://api.fleetyards.net/v1/ships?limit=1' },
            { name: 'UEX Corp', url: 'https://api.uexcorp.space/2.0/commodities?limit=1' },
            { name: 'SC Unpacked', url: 'https://api.scunpacked.com/locations?limit=1' }
        ];
        
        console.log('\nüîç Test de connectivit√© des APIs:');
        for (const test of tests) {
            try {
                await axios.get(test.url, { timeout: 5000 });
                console.log(`‚úÖ ${test.name}: Disponible`);
            } catch (error) {
                console.log(`‚ùå ${test.name}: Indisponible (${error.message})`);
            }
        }
        
        console.log('\nüîÑ D√©but de la mise √† jour...');
        const startTime = Date.now();
        
        await updateService.forceUpdate();
        
        const endTime = Date.now();
        const duration = Math.round((endTime - startTime) / 1000);
        
        console.log(`\nüéâ Mise √† jour termin√©e en ${duration} secondes !`);
        
        // Afficher les statistiques
        const status = updateService.getStatus();
        console.log('\nüìä Statistiques:');
        console.log(`   Derni√®re mise √† jour: ${status.lastUpdate}`);
        console.log(`   Types de donn√©es: ${status.cachedTypes.join(', ')}`);
        console.log(`   Taille du cache: ${status.cacheSize} types`);
        
        // Afficher le d√©tail des donn√©es
        console.log('\nüìã D√©tail des donn√©es mises √† jour:');
        for (const type of status.cachedTypes) {
            const data = updateService.getCachedData(type);
            console.log(`   ${type}: ${Array.isArray(data) ? data.length : 'N/A'} √©l√©ments`);
        }
        
        process.exit(0);
        
    } catch (error) {
        console.error('\n‚ùå Erreur lors de la mise √† jour:', error.message);
        console.error('üí° Essayez avec --force pour forcer la mise √† jour');
        process.exit(1);
    }
}

// Gestion des arguments
if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log('üìñ Aide - Script de mise √† jour des donn√©es');
    console.log('');
    console.log('Usage: node update-data.js [options]');
    console.log('');
    console.log('Options:');
    console.log('  --force    Force la mise √† jour m√™me si les APIs sont indisponibles');
    console.log('  --help     Affiche cette aide');
    console.log('');
    console.log('Exemples:');
    console.log('  node update-data.js              # Mise √† jour normale');
    console.log('  node update-data.js --force      # Mise √† jour forc√©e');
    console.log('');
    process.exit(0);
}

// Lancer la mise √† jour
main().catch(console.error);
