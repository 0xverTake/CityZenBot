// Service d'IA pour conseils et astuces Star Citizen
// Utilise Hugging Face Inference API (gratuite)

const axios = require('axios');
const Logger = require('../utils/Logger');

class StarCitizenAIService {
    constructor() {
        // Hugging Face - API gratuite pour toujours
        this.apiUrl = 'https://api-inference.huggingface.co/models';
        this.apiKey = process.env.HUGGINGFACE_API_KEY || null;
        
        // Mod√®les recommand√©s (gratuits)
        this.models = {
            chat: 'microsoft/DialoGPT-medium', // Bon pour conversations
            advice: 'facebook/blenderbot-400M-distill', // Conseils g√©n√©raux
            text: 'gpt2', // Fallback simple
        };
        
        // Cache intelligent pour √©conomiser l'API
        this.cache = new Map();
        this.cacheMaxSize = 100;
        this.cacheExpiry = 60 * 60 * 1000; // 1 heure
        
        // Compteur d'utilisation API (reset mensuel)
        this.apiUsage = {
            count: parseInt(process.env.API_USAGE_COUNT || '0'),
            month: new Date().getMonth(),
            limit: 1000 // Limite gratuite Hugging Face
        };
        
        // Base de connaissances Star Citizen
        this.scKnowledge = {
            ships: {
                beginner: ['Aurora', '300i', 'Mustang', 'Avenger Titan'],
                cargo: ['Freelancer', 'Caterpillar', 'Hull Series'],
                combat: ['Hornet', 'Sabre', 'Vanguard', 'Gladius'],
                mining: ['Prospector', 'Orion', 'ROC']
            },
            tips: {
                beginner: [
                    "Commencez par les missions de livraison pour apprendre les bases",
                    "L'Aurora et la 300i sont parfaites pour d√©buter",
                    "Sauvegardez r√©guli√®rement vos aUEC dans votre compte",
                    "Rejoignez un org pour apprendre plus vite",
                    "Les missions de investigation sont lucratives pour d√©buter"
                ],
                combat: [
                    "Ma√Ætrisez le vol en mode coupl√©/d√©coupl√©",
                    "G√©rez votre signature thermique pendant le combat",
                    "Les missiles sont efficaces mais co√ªteux",
                    "Apprenez les points faibles de chaque vaisseau"
                ],
                trading: [
                    "V√©rifiez les prix sur UEX Corp avant d'acheter",
                    "Commencez avec des petites cargaisons",
                    "√âvitez les zones de conflit pour le commerce",
                    "Diversifiez vos routes commerciales"
                ]
            },
            locations: {
                starter: ['Area18', 'Lorville', 'New Babbage', 'Orison'],
                trading: ['Port Olisar', 'Grimhex', 'Levski'],
                missions: ['Hurston', 'ArcCorp', 'microTech', 'Crusader']
            }
        };
    }    // G√©n√©rer des conseils IA personnalis√©s
    async generateAdvice(question, playerLevel = 'beginner', category = 'general') {
        try {
            // V√©rifier le cache d'abord
            const cacheKey = this.getCacheKey(question, playerLevel, category);
            const cached = this.getFromCache(cacheKey);
            if (cached) {
                Logger.info('üìã R√©ponse servie depuis le cache');
                return cached;
            }
            
            // Pr√©parer le contexte Star Citizen
            const context = this.buildContext(category, playerLevel);
            
            // Construire le prompt optimis√©
            const prompt = this.buildPrompt(question, context, playerLevel);
            
            // V√©rifier si on doit utiliser l'IA ou le fallback directement
            const shouldUseAI = this.shouldUseAI(question, category);
            
            // Essayer avec l'IA si disponible et pertinent
            if (this.apiKey && shouldUseAI && this.canUseAPI()) {
                const aiResponse = await this.callHuggingFaceAPI(prompt);
                if (aiResponse) {
                    const formattedResponse = this.formatResponse(aiResponse, category, playerLevel);
                    this.addToCache(cacheKey, formattedResponse);
                    return formattedResponse;
                }
            }
            
            // Fallback : r√©ponse bas√©e sur la base de connaissances
            const fallbackResponse = this.generateFallbackAdvice(question, category, playerLevel);
            this.addToCache(cacheKey, fallbackResponse);
            return fallbackResponse;
            
        } catch (error) {
            Logger.warn('‚ö†Ô∏è Erreur IA, utilisation du fallback:', error.message);
            return this.generateFallbackAdvice(question, category, playerLevel);
        }
    }

    // D√©terminer si l'IA est n√©cessaire ou si le fallback suffit
    shouldUseAI(question, category) {
        const lowerQuestion = question.toLowerCase();
        
        // Questions simples ‚Üí Fallback direct (√©conomise l'API)
        const simpleKeywords = [
            'vaisseau recommand√©', 'meilleur ship', 'comment d√©buter',
            'premi√®re mission', 'o√π aller', 'quoi faire'
        ];
        
        if (simpleKeywords.some(keyword => lowerQuestion.includes(keyword))) {
            return false; // Fallback direct
        }
        
        // Questions complexes ‚Üí IA
        const complexKeywords = [
            'strat√©gie', 'optimiser', 'probl√®me avec', 'bug', 'erreur',
            'configuration', 'performance', 'pourquoi', 'comment exactement'
        ];
        
        return complexKeywords.some(keyword => lowerQuestion.includes(keyword));
    }

    // V√©rifier si on peut utiliser l'API (quota disponible)
    canUseAPI() {
        // Reset mensuel
        const currentMonth = new Date().getMonth();
        if (currentMonth !== this.apiUsage.month) {
            this.apiUsage.count = 0;
            this.apiUsage.month = currentMonth;
        }
        
        return this.apiUsage.count < this.apiUsage.limit;
    }

    // Gestion du cache
    getCacheKey(question, playerLevel, category) {
        return `${category}-${playerLevel}-${question.toLowerCase().slice(0, 50)}`;
    }

    getFromCache(key) {
        const cached = this.cache.get(key);
        if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
            return cached.data;
        }
        this.cache.delete(key);
        return null;
    }

    addToCache(key, data) {
        // Nettoyer le cache si trop plein
        if (this.cache.size >= this.cacheMaxSize) {
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }
        
        this.cache.set(key, {
            data: data,
            timestamp: Date.now()
        });
    }

    // Construire le contexte selon la cat√©gorie
    buildContext(category, playerLevel) {
        let context = `Star Citizen 4.2 - Guide pour niveau: ${playerLevel}\n`;
        
        switch (category) {
            case 'ships':
                context += `Vaisseaux recommand√©s: ${this.scKnowledge.ships[playerLevel]?.join(', ') || 'Vari√©s'}\n`;
                break;
            case 'combat':
                context += `Conseils combat: ${this.scKnowledge.tips.combat.slice(0, 2).join('. ')}\n`;
                break;
            case 'trading':
                context += `Commerce: ${this.scKnowledge.tips.trading.slice(0, 2).join('. ')}\n`;
                break;
            case 'beginner':
                context += `Conseils d√©butant: ${this.scKnowledge.tips.beginner.slice(0, 3).join('. ')}\n`;
                break;
        }
        
        return context;
    }

    // Construire un prompt optimis√©
    buildPrompt(question, context, playerLevel) {
        return `${context}

Question du joueur ${playerLevel}: ${question}

R√©ponds avec un conseil pratique et sp√©cifique pour Star Citizen 4.2 en fran√ßais. 
Sois concret, utile et encourage le joueur. Maximum 150 mots.

R√©ponse:`;
    }    // Appeler l'API Hugging Face
    async callHuggingFaceAPI(prompt) {
        try {
            // Incr√©menter le compteur d'utilisation
            this.apiUsage.count++;
            
            Logger.info(`ü§ñ Appel IA Hugging Face (${this.apiUsage.count}/${this.apiUsage.limit})`);
            
            const response = await axios.post(
                `${this.apiUrl}/${this.models.advice}`,
                {
                    inputs: prompt,
                    parameters: {
                        max_new_tokens: 150,
                        temperature: 0.7,
                        return_full_text: false,
                        do_sample: true
                    }
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 12000 // Augment√© pour plus de stabilit√©
                }
            );

            const aiText = response.data[0]?.generated_text?.trim();
            if (aiText && aiText.length > 20) {
                Logger.info('‚úÖ R√©ponse IA g√©n√©r√©e avec succ√®s');
                return aiText;
            } else {
                Logger.warn('‚ö†Ô∏è R√©ponse IA trop courte, utilisation du fallback');
                return null;
            }
        } catch (error) {
            // D√©cr√©menter si erreur (pour ne pas gaspiller le quota)
            this.apiUsage.count = Math.max(0, this.apiUsage.count - 1);
            
            if (error.response?.status === 429) {
                Logger.warn('‚ö†Ô∏è Quota API Hugging Face d√©pass√©');
            } else {
                Logger.warn('‚ö†Ô∏è Hugging Face API indisponible:', error.message);
            }
            return null;
        }
    }

    // R√©ponse de fallback bas√©e sur les connaissances
    generateFallbackAdvice(question, category, playerLevel) {
        const lowerQuestion = question.toLowerCase();
        
        // D√©tection de mots-cl√©s pour conseils cibl√©s
        if (lowerQuestion.includes('vaisseau') || lowerQuestion.includes('ship')) {
            return this.getShipAdvice(playerLevel);
        }
        
        if (lowerQuestion.includes('combat') || lowerQuestion.includes('arme')) {
            return this.getCombatAdvice(playerLevel);
        }
        
        if (lowerQuestion.includes('commerce') || lowerQuestion.includes('trading') || lowerQuestion.includes('argent')) {
            return this.getTradingAdvice(playerLevel);
        }
        
        if (lowerQuestion.includes('d√©butant') || lowerQuestion.includes('commencer') || lowerQuestion.includes('nouveau')) {
            return this.getBeginnerAdvice();
        }
        
        if (lowerQuestion.includes('mission')) {
            return this.getMissionAdvice(playerLevel);
        }
        
        // Conseil g√©n√©ral
        return this.getGeneralAdvice(playerLevel);
    }

    // Conseils sp√©cialis√©s
    getShipAdvice(playerLevel) {
        const ships = this.scKnowledge.ships[playerLevel] || this.scKnowledge.ships.beginner;
        return {
            title: "üöÄ Conseils Vaisseaux",
            content: `Pour votre niveau (${playerLevel}), je recommande ces vaisseaux : **${ships.join(', ')}**. 

${playerLevel === 'beginner' ? 
    "L'**Aurora MR** est parfaite pour d√©buter : polyvalente, abordable et facile √† piloter. La **300i** offre plus de confort avec un lit et une kitchenette." :
    "Concentrez-vous sur des vaisseaux sp√©cialis√©s selon votre activit√© favorite : cargo, combat ou exploration."}

üí° **Astuce** : Louez avant d'acheter pour tester le vaisseau !`,
            ai_powered: false,
            category: 'ships'
        };
    }

    getCombatAdvice(playerLevel) {
        const tips = this.scKnowledge.tips.combat;
        return {
            title: "‚öîÔ∏è Conseils Combat",
            content: `**Combat en Star Citizen 4.2 :**

‚Ä¢ ${tips[0]}
‚Ä¢ ${tips[1]}
‚Ä¢ Commencez par des missions de s√©curit√© faciles (VLT)
‚Ä¢ Utilisez le mode **coupl√©** pour les d√©butants

${playerLevel === 'beginner' ? 
    'üéØ **Pour d√©buter** : Missions "Eliminate Threat" autour de Crusader sont parfaites pour s\'entra√Æner.' :
    '‚ö° **Avanc√©** : Ma√Ætrisez le vol en mode d√©coupl√© et les man≈ìuvres d\'√©vasion.'}`,
            ai_powered: false,
            category: 'combat'
        };
    }

    getTradingAdvice(playerLevel) {
        const tips = this.scKnowledge.tips.trading;
        return {
            title: "üí∞ Conseils Commerce",
            content: `**Trading rentable en SC 4.2 :**

‚Ä¢ ${tips[0]}
‚Ä¢ ${tips[1]}
‚Ä¢ **Route d√©butant** : Medical Supplies de Area18 vers Hurston
‚Ä¢ **Outils** : Utilisez UEX Corp pour les prix actuels

${playerLevel === 'beginner' ? 
    'üì¶ **Commencez petit** : 10-20 SCU max pour limiter les risques.' :
    'üöõ **Optimisez** : Caterpillar ou Freelancer MAX pour de gros volumes.'}

‚ö†Ô∏è **Attention** : √âvitez les zones de conflit pour vos livraisons !`,
            ai_powered: false,
            category: 'trading'
        };
    }

    getBeginnerAdvice() {
        const tips = this.scKnowledge.tips.beginner;
        return {
            title: "üåü Guide D√©butant",
            content: `**Bienvenue dans Star Citizen 4.2 !**

**Premiers pas essentiels :**
‚Ä¢ ${tips[0]}
‚Ä¢ ${tips[1]}
‚Ä¢ ${tips[2]}
‚Ä¢ ${tips[3]}

**Progression recommand√©e :**
1. **Missions de livraison** (faciles, s√ªres)
2. **Missions d'investigation** (lucratives)
3. **Commerce de base** (Medical Supplies)
4. **Combat simple** (Eliminate Threat)

üéÆ **Conseil #1** : Configurez vos contr√¥les avant tout !`,
            ai_powered: false,
            category: 'beginner'
        };
    }

    getMissionAdvice(playerLevel) {
        return {
            title: "üìã Conseils Missions",
            content: `**Missions recommand√©es pour ${playerLevel} :**

**üü¢ Faciles & Lucratives :**
‚Ä¢ **Investigation** : 45k aUEC, peu de risques
‚Ä¢ **Livraison de cargaison** : Revenus stables
‚Ä¢ **Maintenance** : Simple et bien pay√©

**üü° Interm√©diaires :**
‚Ä¢ **Eliminate Threat** : Combat contre IA
‚Ä¢ **Cave missions** : Exploration + loot

**üî¥ Difficiles :**
‚Ä¢ **Bunker missions** : PvP possible
‚Ä¢ **Group missions** : √âquipe requise

üí° **Astuce** : Commencez toujours par lire enti√®rement la description !`,
            ai_powered: false,
            category: 'missions'
        };
    }

    getGeneralAdvice(playerLevel) {
        return {
            title: "‚ÑπÔ∏è Conseil G√©n√©ral",
            content: `**Star Citizen 4.2 - Conseil personnalis√© :**

Selon votre niveau (${playerLevel}), concentrez-vous sur :

${playerLevel === 'beginner' ? 
    '‚Ä¢ **Ma√Ætriser les bases** : Vol, atterrissage, navigation\n‚Ä¢ **Missions simples** : Investigation et livraison\n‚Ä¢ **√âconomiser** : Construisez votre capital progressivement' :
    '‚Ä¢ **Sp√©cialisation** : Choisissez votre domaine favori\n‚Ä¢ **Optimisation** : Perfectionnez vos techniques\n‚Ä¢ **Coop√©ration** : Rejoignez des missions de groupe'}

üåå **Remember** : Star Citizen r√©compense la patience et la pers√©v√©rance !

*Besoin d'aide sp√©cifique ? Demandez-moi des conseils sur les vaisseaux, combat, commerce ou missions.*`,
            ai_powered: false,
            category: 'general'
        };
    }

    // Formater la r√©ponse finale
    formatResponse(aiText, category, playerLevel) {
        return {
            title: "ü§ñ Conseil IA Star Citizen",
            content: aiText,
            ai_powered: true,
            category: category,
            player_level: playerLevel,
            disclaimer: "R√©ponse g√©n√©r√©e par IA - V√©rifiez les infos in-game"
        };
    }

    // Obtenir des astuces al√©atoires
    getRandomTip(category = 'beginner') {
        const tips = this.scKnowledge.tips[category] || this.scKnowledge.tips.beginner;
        const randomTip = tips[Math.floor(Math.random() * tips.length)];
        
        return {
            title: "üí° Astuce du Jour",
            content: randomTip,
            category: category
        };
    }    // V√©rifier si l'API IA est disponible
    async checkAIAvailability() {
        if (!this.apiKey) {
            return {
                available: false,
                reason: 'API key manquante - Ajoutez HUGGINGFACE_API_KEY dans .env',
                fallback: true,
                setup_guide: 'Voir HUGGINGFACE_API_SETUP.md pour obtenir une cl√© gratuite'
            };
        }

        // V√©rifier le quota
        if (!this.canUseAPI()) {
            return {
                available: false,
                reason: `Quota mensuel d√©pass√© (${this.apiUsage.count}/${this.apiUsage.limit})`,
                fallback: true,
                reset_date: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 1).toLocaleDateString('fr-FR')
            };
        }

        try {
            const response = await axios.get(`${this.apiUrl}/gpt2`, {
                headers: { 'Authorization': `Bearer ${this.apiKey}` },
                timeout: 5000
            });
            
            return {
                available: true,
                model: 'Hugging Face Inference API',
                status: response.status,
                quota: `${this.apiUsage.count}/${this.apiUsage.limit} utilis√©es ce mois`,
                cache_size: this.cache.size
            };
        } catch (error) {
            let reason = 'Erreur de connexion';
            if (error.response?.status === 401) {
                reason = 'API key invalide';
            } else if (error.response?.status === 429) {
                reason = 'Limite de taux d√©pass√©e';
            }
            
            return {
                available: false,
                reason: reason,
                fallback: true,
                error_details: error.message
            };
        }
    }

    // Obtenir les statistiques d'utilisation
    getUsageStats() {
        return {
            api_calls_this_month: this.apiUsage.count,
            quota_limit: this.apiUsage.limit,
            quota_remaining: this.apiUsage.limit - this.apiUsage.count,
            cache_entries: this.cache.size,
            cache_max_size: this.cacheMaxSize,
            quota_reset_date: new Date(new Date().getFullYear(), new Date().getMonth() + 1, 1).toLocaleDateString('fr-FR')
        };
    }
}

module.exports = StarCitizenAIService;
