// Service d'Intelligence Artificielle pour conseils Star Citizen
// Utilise Hugging Face API pour donner des conseils aux d√©butants
// Int√®gre les guides officiels RSI Spectrum

const axios = require('axios');
const Logger = require('../utils/Logger');
const SpectrumService = require('./SpectrumService');

class AIService {
    constructor() {
        this.apiKey = process.env.HUGGINGFACE_TOKEN;
        this.apiUrl = 'https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium';
        this.model = 'microsoft/DialoGPT-medium'; // Mod√®le gratuit et efficace
        this.isEnabled = !!this.apiKey;
        
        // Initialiser le service Spectrum
        this.spectrumService = new SpectrumService();
        
        // Cache pour optimiser l'utilisation de l'API gratuite
        this.responseCache = new Map();
        this.usageStats = {
            requests: 0,
            cacheHits: 0,
            errors: 0,
            lastReset: new Date()
        };
        
        // Guides officiels Star Citizen
        this.officialGuides = {
            base_url: 'https://robertsspaceindustries.com/spectrum/guide',
            categories: [
                'D√©marrage rapide',
                'Interface utilisateur',
                'Contr√¥les de vol',
                'Commerce et √©conomie',
                'Combat et PvP',
                'Exploration',
                'Mining (minage)',
                'Transport de fret',
                'Organisations',
                'Univers persistant'
            ]
        };
        
        // Base de connaissances Star Citizen int√©gr√©e
        this.scKnowledge = {
            debutant: {
                'premier_vaisseau': 'Pour d√©buter, l\'Aurora MR ou le Mustang Alpha sont parfaits. Ils sont polyvalents et abordables.',
                'ou_commencer': 'Commencez par les missions de livraison simples depuis les stations Crusader ou ArcCorp.',
                'controles': 'Appuyez sur F1 pour voir tous les raccourcis clavier. TAB pour le mobiglas, F pour interagir.',
                'argent': 'Les missions de livraison et de transport donnent 8000-15000 aUEC. √âvitez le combat au d√©but.',
                'mort': 'Si vous mourez, vous respawnez au dernier h√¥pital visit√©. Vos objets restent sur votre corps.',
                'performance': 'Baissez les param√®tres graphiques et fermez les autres programmes pour am√©liorer les FPS.'
            },
            commerce: {
                'routes_profitables': 'Laranite de Lyria vers ArcCorp (1,5M+ de profit), Aluminium de Daymar vers New Babbage.',
                'cargo': 'Commencez avec un Cutlass Black (46 SCU) puis passez au Freelancer MAX (120 SCU).',
                'risques': '√âvitez les zones de conflit (Kareah, GrimHex) avec du cargo pr√©cieux.',
                'stations': 'Utilisez UEX Corp (uexcorp.space) pour trouver les meilleurs prix en temps r√©el.'
            },
            combat: {
                'premier_chasseur': 'Arrow ou Gladius pour d√©buter, Hornet F7C pour plus de polyvalence.',
                'armes': '√âquipez des armes de m√™me type (laser ou balistique) pour une gestion d\'√©nergie optimale.',
                'boucliers': 'Priorisez les boucliers de grade A. Rampart et Stronghold sont excellents.',
                'tactiques': 'Gardez vos distances, utilisez les missiles avec parcimonie, g√©rez votre vitesse.'
            },
            mining: {
                'equipement': 'Prospector pour d√©buter (solo), MOLE pour le minage en √©quipe.',
                'minerais': 'Quantainium = tr√®s profitable mais instable, Laranite = stable et rentable.',
                'lieux': 'Daymar et Lyria pour d√©buter, ast√©ro√Ødes Aaron Halo pour les experts.',
                'outils': 'Module Helix pour stabilit√©, Hofstede S1 pour efficacit√©.'
            }
        };
          if (this.isEnabled) {
            Logger.info('ü§ñ Service IA activ√© avec Hugging Face API');
            this.initializeSpectrumService();
        } else {
            Logger.warn('‚ö†Ô∏è Service IA d√©sactiv√© - Token Hugging Face manquant');
        }
    }

    // Initialiser le service Spectrum
    async initializeSpectrumService() {
        try {
            await this.spectrumService.initialize();
        } catch (error) {
            Logger.error('‚ùå Erreur initialisation SpectrumService:', error.message);
        }
    }

    // Obtenir des conseils IA pour Star Citizen
    async getAdvice(question, category = 'general', userLevel = 'debutant') {
        if (!this.isEnabled) {
            return this.getFallbackAdvice(question, category);
        }

        try {
            // V√©rifier le cache d'abord
            const cacheKey = `${category}_${question.toLowerCase().substring(0, 50)}`;
            if (this.responseCache.has(cacheKey)) {
                this.usageStats.cacheHits++;
                Logger.info('üéØ R√©ponse IA depuis le cache');
                return this.responseCache.get(cacheKey);
            }

            // Construire le prompt avec contexte Star Citizen
            const prompt = this.buildStarCitizenPrompt(question, category, userLevel);
            
            // Faire la requ√™te √† Hugging Face
            const response = await this.makeHuggingFaceRequest(prompt);
            
            // Traiter et enrichir la r√©ponse
            const enrichedResponse = this.enrichResponseWithSCData(response, category);
            
            // Mettre en cache (max 100 entr√©es)
            if (this.responseCache.size >= 100) {
                const firstKey = this.responseCache.keys().next().value;
                this.responseCache.delete(firstKey);
            }
            this.responseCache.set(cacheKey, enrichedResponse);
            
            this.usageStats.requests++;
            Logger.info('ü§ñ Conseil IA g√©n√©r√© avec succ√®s');
            
            return enrichedResponse;
            
        } catch (error) {
            this.usageStats.errors++;
            Logger.error('‚ùå Erreur service IA:', error.message);
            return this.getFallbackAdvice(question, category);
        }
    }

    // Construire un prompt optimis√© pour Star Citizen
    buildStarCitizenPrompt(question, category, userLevel) {
        const contextMap = {
            'combat': 'Tu es un pilote expert en combat spatial dans Star Citizen',
            'commerce': 'Tu es un trader exp√©riment√© dans l\'univers Star Citizen',
            'mining': 'Tu es un mineur professionnel dans Star Citizen',
            'exploration': 'Tu es un explorateur chevronn√© de l\'univers Star Citizen',
            'debutant': 'Tu es un mentor bienveillant pour les nouveaux joueurs Star Citizen'
        };
        
        const context = contextMap[category] || 'Tu es un guide expert Star Citizen';
        
        return `${context}. Version actuelle: Star Citizen 4.2.
        
Niveau du joueur: ${userLevel}
Cat√©gorie: ${category}
        
Question: ${question}

R√©ponds en fran√ßais, de mani√®re concise (max 200 mots), avec des conseils pratiques et pr√©cis pour Star Citizen 4.2. Include des informations sur les co√ªts en aUEC si pertinent.

Guides officiels disponibles: ${this.officialGuides.base_url}`;
    }

    // Faire une requ√™te √† Hugging Face API
    async makeHuggingFaceRequest(prompt) {
        const response = await axios.post(
            this.apiUrl,
            {
                inputs: prompt,
                parameters: {
                    max_length: 200,
                    temperature: 0.7,
                    do_sample: true,
                    top_p: 0.9
                }
            },
            {
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                timeout: 10000
            }
        );

        if (response.data && response.data[0] && response.data[0].generated_text) {
            return response.data[0].generated_text;
        } else {
            throw new Error('R√©ponse API invalide');
        }
    }    // Enrichir la r√©ponse avec des donn√©es Star Citizen
    enrichResponseWithSCData(aiResponse, category) {
        // R√©cup√©rer les guides Spectrum pertinents
        const spectrumGuide = this.spectrumService.getGuideByCategory(category);
        
        let enrichedResponse = {
            ai_advice: aiResponse,
            category: category,
            official_guides: spectrumGuide ? `üìö Guide officiel: ${spectrumGuide.title}` : `üìö Guides officiels: ${this.officialGuides.base_url}`,
            spectrum_tips: spectrumGuide ? spectrumGuide.tips.slice(0, 3) : [],
            quick_tips: [],
            related_commands: [],
            sc_version: '4.2'
        };

        // Ajouter des conseils rapides selon la cat√©gorie
        if (category === 'debutant' || category === 'general') {
            const beginnerData = this.spectrumService.getBeginnerTips();
            enrichedResponse.quick_tips = beginnerData.tips.slice(0, 4);
            enrichedResponse.related_commands = ['/ship', '/meta', '/buy'];
            enrichedResponse.sc42_features = beginnerData.sc42Updates.slice(0, 2);
        }

        if (category === 'combat') {
            enrichedResponse.quick_tips = [
                '‚öîÔ∏è Utilisez `/meta pvp` pour voir les meilleurs vaisseaux',
                '‚öîÔ∏è G√©rez votre √©nergie entre armes/boucliers/moteurs',
                '‚öîÔ∏è Entra√Ænez-vous dans Arena Commander'
            ];
            enrichedResponse.related_commands = ['/meta pvp', '/build'];
        }

        if (category === 'commerce') {
            enrichedResponse.quick_tips = [
                'üí∞ V√©rifiez UEX Corp pour les prix actuels',
                'üí∞ Commencez petit avec un Cutlass Black',
                'üí∞ √âvitez les zones de conflit avec du cargo'
            ];
            enrichedResponse.related_commands = ['/buy', '/ship cargo'];
        }

        if (category === 'minage') {
            enrichedResponse.quick_tips = [
                '‚õèÔ∏è Commencez avec un Prospector pour apprendre',
                '‚õèÔ∏è Utilisez les outils de minage appropri√©s',
                '‚õèÔ∏è Surveillez la stabilit√© des roches'
            ];
            enrichedResponse.related_commands = ['/ship mining', '/meta'];
        }

        if (category === 'exploration') {
            enrichedResponse.quick_tips = [
                'üîç √âquipez-vous d\'un scanner longue port√©e',
                'üîç Cartographiez m√©thodiquement les syst√®mes',
                'üîç Documentez vos d√©couvertes'
            ];
            enrichedResponse.related_commands = ['/ship exploration', '/meta'];
        }

        return enrichedResponse;
    }

    // R√©ponse de secours sans IA
    getFallbackAdvice(question, category) {
        const categoryAdvice = this.scKnowledge[category] || this.scKnowledge.debutant;
        
        // Chercher dans la base de connaissances
        for (const [key, advice] of Object.entries(categoryAdvice)) {
            if (question.toLowerCase().includes(key) || 
                question.toLowerCase().includes(key.replace('_', ' '))) {
                return {
                    ai_advice: advice,
                    category: category,
                    source: 'Base de connaissances locale',
                    official_guides: `üìö Guides officiels: ${this.officialGuides.base_url}`,
                    quick_tips: ['üí° Consultez les guides officiels pour plus de d√©tails'],
                    related_commands: ['/help'],
                    sc_version: '4.2',
                    fallback: true
                };
            }
        }

        // Conseil g√©n√©rique
        return {
            ai_advice: `Pour cette question sur ${category}, je recommande de consulter les guides officiels Star Citizen. Ils contiennent des informations d√©taill√©es et √† jour pour la version 4.2.`,
            category: category,
            source: 'Conseil g√©n√©rique',
            official_guides: `üìö Guides officiels: ${this.officialGuides.base_url}`,
            quick_tips: [
                'üìñ Consultez les guides officiels RSI',
                'üéÆ Entra√Ænez-vous dans Arena Commander',
                'üë• Rejoignez une organisation d\'aide aux d√©butants'
            ],
            related_commands: ['/help', '/ship', '/meta'],
            sc_version: '4.2',
            fallback: true
        };
    }

    // Obtenir des conseils sp√©cifiques pour d√©butants
    async getBeginnerTips(topic) {
        const beginnerQuestions = {
            'premier-pas': 'Que dois-je faire en premier dans Star Citizen ?',
            'vaisseau': 'Quel vaisseau choisir pour d√©buter ?',
            'argent': 'Comment gagner de l\'argent rapidement ?',
            'controles': 'Quels sont les contr√¥les essentiels ?',
            'performance': 'Comment am√©liorer les performances ?',
            'missions': 'Quelles missions pour d√©buter ?'
        };

        const question = beginnerQuestions[topic] || `Conseils pour ${topic}`;
        return await this.getAdvice(question, 'debutant', 'nouveau_joueur');
    }

    // Statistiques d'utilisation
    getUsageStats() {
        const uptime = Date.now() - this.usageStats.lastReset.getTime();
        const hours = Math.floor(uptime / (1000 * 60 * 60));
        
        return {
            enabled: this.isEnabled,
            model: this.model,
            requests_total: this.usageStats.requests,
            cache_hits: this.usageStats.cacheHits,
            errors: this.usageStats.errors,
            cache_size: this.responseCache.size,
            hit_rate: this.usageStats.requests > 0 ? 
                Math.round((this.usageStats.cacheHits / (this.usageStats.requests + this.usageStats.cacheHits)) * 100) : 0,
            uptime_hours: hours,
            api_provider: 'Hugging Face (Gratuit)',
            guides_source: this.officialGuides.base_url
        };
    }

    // Vider le cache
    clearCache() {
        this.responseCache.clear();
        Logger.info('üßπ Cache IA vid√©');
    }

    // R√©initialiser les statistiques
    resetStats() {
        this.usageStats = {
            requests: 0,
            cacheHits: 0,
            errors: 0,
            lastReset: new Date()
        };
        Logger.info('üìä Statistiques IA r√©initialis√©es');
    }
}

module.exports = AIService;
