#!/bin/bash
# Script de d√©ploiement du CityZenBot vers Raspberry Pi
# Usage: ./deploy-to-pi.sh

# Configuration par d√©faut
PI_HOST="${PI_HOST:-192.168.0.181}"
PI_USER="${PI_USER:-trn}"
PI_PASSWORD="${PI_PASSWORD:-2025}"
REMOTE_DIR="${REMOTE_DIR:-/home/trn/CityZenBot}"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ D√©ploiement du CityZenBot vers le Raspberry Pi${NC}"
echo -e "${YELLOW}Host: $PI_USER@$PI_HOST${NC}"
echo -e "${YELLOW}R√©pertoire distant: $REMOTE_DIR${NC}"

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire du projet CityZenBot${NC}"
    exit 1
fi

# Fonction pour ex√©cuter des commandes SSH
run_ssh_command() {
    local command="$1"
    local description="$2"
    
    echo -e "${CYAN}üîß $description${NC}"
    
    sshpass -p "$PI_PASSWORD" ssh -o StrictHostKeyChecking=no "$PI_USER@$PI_HOST" "$command"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $description - Succ√®s${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è $description - Avertissement (code: $exit_code)${NC}"
    fi
    
    return $exit_code
}

# Fonction pour v√©rifier les d√©pendances
check_dependencies() {
    echo -e "${CYAN}üîç V√©rification des d√©pendances...${NC}"
    
    # V√©rifier sshpass
    if ! command -v sshpass &> /dev/null; then
        echo -e "${RED}‚ùå sshpass n'est pas install√©${NC}"
        echo -e "${YELLOW}Installation: sudo apt-get install sshpass (Ubuntu/Debian)${NC}"
        echo -e "${YELLOW}Installation: brew install sshpass (macOS)${NC}"
        return 1
    fi
    
    # V√©rifier rsync
    if ! command -v rsync &> /dev/null; then
        echo -e "${RED}‚ùå rsync n'est pas install√©${NC}"
        echo -e "${YELLOW}Installation: sudo apt-get install rsync${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Toutes les d√©pendances sont pr√©sentes${NC}"
    return 0
}

# Fonction pour transf√©rer les fichiers
transfer_files() {
    echo -e "${CYAN}üì§ Transfert des fichiers vers le Raspberry Pi...${NC}"
    
    # Cr√©er le r√©pertoire distant
    run_ssh_command "mkdir -p $REMOTE_DIR" "Cr√©ation du r√©pertoire distant"
    
    # Utiliser rsync pour transf√©rer les fichiers avec exclusions
    echo -e "${CYAN}üì¶ Synchronisation des fichiers...${NC}"
    
    sshpass -p "$PI_PASSWORD" rsync -avz --progress \
        --exclude='node_modules/' \
        --exclude='.git/' \
        --exclude='*.log' \
        --exclude='bot.db' \
        --exclude='database.db' \
        --exclude='.env' \
        --exclude='deploy-to-pi.*' \
        --exclude='*.tmp' \
        --exclude='*.temp' \
        -e "ssh -o StrictHostKeyChecking=no" \
        ./ "$PI_USER@$PI_HOST:$REMOTE_DIR/"
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Transfert des fichiers - Succ√®s${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Transfert des fichiers - √âchec (code: $exit_code)${NC}"
        return 1
    fi
}

# Fonction pour installer les d√©pendances sur le Pi
install_dependencies() {
    echo -e "${CYAN}üì• Installation des d√©pendances sur le Raspberry Pi...${NC}"
    
    # Mettre √† jour npm si n√©cessaire
    run_ssh_command "cd $REMOTE_DIR && npm --version" "V√©rification de npm"
    
    # Installer les d√©pendances
    run_ssh_command "cd $REMOTE_DIR && npm install --production" "Installation des d√©pendances Node.js"
    
    return $?
}

# Fonction pour configurer l'environnement
configure_environment() {
    echo -e "${CYAN}‚öôÔ∏è Configuration de l'environnement...${NC}"
    
    # Copier le fichier de configuration pour Pi
    run_ssh_command "cd $REMOTE_DIR && cp .env.pi .env" "Configuration du fichier .env"
    
    # Rendre les scripts ex√©cutables
    run_ssh_command "cd $REMOTE_DIR && chmod +x start.sh" "Configuration des permissions"
    
    return $?
}

# Fonction pour tester l'installation
test_installation() {
    echo -e "${CYAN}üß™ Test de l'installation...${NC}"
    
    # Tester la configuration
    run_ssh_command "cd $REMOTE_DIR && node test.js" "Test de l'installation"
    
    return $?
}

# Fonction pour afficher les instructions post-d√©ploiement
show_instructions() {
    echo -e ""
    echo -e "${GREEN}üéâ D√©ploiement termin√© avec succ√®s!${NC}"
    echo -e "${CYAN}Vous pouvez maintenant vous connecter au Pi et d√©marrer le bot:${NC}"
    echo -e ""
    echo -e "${YELLOW}üìã Prochaines √©tapes:${NC}"
    echo -e "   ${WHITE}1. ssh $PI_USER@$PI_HOST${NC}"
    echo -e "   ${WHITE}2. cd $REMOTE_DIR${NC}"
    echo -e "   ${WHITE}3. nano .env${NC} ${CYAN}(configurez votre token Discord)${NC}"
    echo -e "   ${WHITE}4. node deploy-commands.js${NC} ${CYAN}(d√©ployez les commandes slash)${NC}"
    echo -e "   ${WHITE}5. ./start.sh${NC} ${CYAN}(d√©marrez le bot)${NC}"
    echo -e ""
    echo -e "${CYAN}üí° Pour un d√©marrage automatique, consultez RASPBERRY_PI.md${NC}"
    echo -e ""
}

# Menu principal
show_menu() {
    echo -e "${BLUE}üîß Options de d√©ploiement:${NC}"
    echo -e "1) D√©ploiement complet (recommand√©)"
    echo -e "2) Transfert de fichiers uniquement"
    echo -e "3) Installation des d√©pendances uniquement"
    echo -e "4) Test de l'installation"
    echo -e "5) Quitter"
    echo -e ""
    read -p "Choisissez une option (1-5): " choice
    
    case $choice in
        1)
            echo -e "${GREEN}üöÄ D√©marrage du d√©ploiement complet...${NC}"
            full_deployment
            ;;
        2)
            echo -e "${GREEN}üì§ Transfert des fichiers uniquement...${NC}"
            transfer_files
            ;;
        3)
            echo -e "${GREEN}üì• Installation des d√©pendances uniquement...${NC}"
            install_dependencies
            ;;
        4)
            echo -e "${GREEN}üß™ Test de l'installation...${NC}"
            test_installation
            ;;
        5)
            echo -e "${YELLOW}üëã Au revoir!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Option invalide${NC}"
            show_menu
            ;;
    esac
}

# Fonction de d√©ploiement complet
full_deployment() {
    echo -e "${GREEN}üîÑ D√©but du d√©ploiement complet...${NC}"
    
    # V√©rifier les d√©pendances
    if ! check_dependencies; then
        echo -e "${RED}‚ùå D√©pendances manquantes. Arr√™t du d√©ploiement.${NC}"
        exit 1
    fi
    
    # Transf√©rer les fichiers
    if ! transfer_files; then
        echo -e "${RED}‚ùå √âchec du transfert de fichiers${NC}"
        exit 1
    fi
    
    # Installer les d√©pendances
    if ! install_dependencies; then
        echo -e "${YELLOW}‚ö†Ô∏è Probl√®me lors de l'installation des d√©pendances${NC}"
    fi
    
    # Configurer l'environnement
    if ! configure_environment; then
        echo -e "${YELLOW}‚ö†Ô∏è Probl√®me lors de la configuration${NC}"
    fi
    
    # Tester l'installation
    if ! test_installation; then
        echo -e "${YELLOW}‚ö†Ô∏è Probl√®me lors du test${NC}"
    fi
    
    # Afficher les instructions
    show_instructions
}

# Point d'entr√©e principal
main() {
    # V√©rifier les arguments
    if [ "$1" = "--auto" ] || [ "$1" = "-a" ]; then
        full_deployment
    elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo -e "${BLUE}Usage: $0 [options]${NC}"
        echo -e ""
        echo -e "${YELLOW}Options:${NC}"
        echo -e "  -a, --auto    D√©ploiement automatique complet"
        echo -e "  -h, --help    Afficher cette aide"
        echo -e ""
        echo -e "${YELLOW}Variables d'environnement:${NC}"
        echo -e "  PI_HOST       Adresse IP du Raspberry Pi (d√©faut: 192.168.0.181)"
        echo -e "  PI_USER       Nom d'utilisateur (d√©faut: trn)"
        echo -e "  PI_PASSWORD   Mot de passe (d√©faut: 2025)"
        echo -e "  REMOTE_DIR    R√©pertoire distant (d√©faut: /home/trn/CityZenBot)"
        echo -e ""
        echo -e "${CYAN}Exemple:${NC}"
        echo -e "  PI_HOST=192.168.1.100 PI_USER=pi ./deploy-to-pi.sh --auto"
    else
        show_menu
    fi
}

# Ex√©cuter le script principal
main "$@"
